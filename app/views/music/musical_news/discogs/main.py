from typing import List, Dict
from datetime import datetime
import asyncio
from asyncio import Future

from aiogram import Router, F
from aiogram.types import CallbackQuery, InputMediaPhoto, Message, ReplyKeyboardRemove
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from config.music import discogs_setting
from keyboards.music.inline import get_discogs_menu_button
from keyboards.reply import get_main_menu_button
from keyboards.reply import get_cancel_button
from keyboards.inline import get_button_for_forward_or_back
from functions.music import get_list_albums_for_discogs, get_descripions_for_albums
from extensions import bot
from utils.music.discogs.discogs import make_update_progress, make_cancel_check


router: Router = Router(name=__name__)


@router.callback_query(StateFilter(None), F.data == discogs_setting.CALLBACK_DISCOGS)
async def main(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è discogs.com."""
    await call.message.answer(
        text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        reply_markup=get_discogs_menu_button(),
    )


class DiscogsFSM(StatesGroup):
    """FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º discogs.com."""

    albums_list: State = State()
    discogs_state: State = State()
    counter = State()


@router.message(DiscogsFSM.counter, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(DiscogsFSM.albums_list, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_discogs_handler(message: Message, state=FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM DiscogsFSM.–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è."""
    current_state = await state.get_state()

    if current_state == "DiscogsFSM:counter":
        await state.set_state(DiscogsFSM.discogs_state)
        await state.update_data(discogs_state=True)
        await state.set_state(DiscogsFSM.counter)
    else:
        await state.clear()
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω...",
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            "–ü—Ä–æ—Å–º–æ—Ç—Ä –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞ discogs.com –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=get_main_menu_button(),
        )


@router.message(DiscogsFSM.counter, F.text)
@router.message(DiscogsFSM.albums_list, F.text)
async def get_message_DiscogsFSM(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å–±–æ–º–æ–≤."""
    current_state = await state.get_state()

    if current_state == "DiscogsFSM:counter":
        await message.answer(text="–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")
    else:
        await message.answer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é")


@router.callback_query(StateFilter(None), F.data.startswith("GenreDiscogs_"))
async def get_album_artists_by_genre_for_site_discogs(
    call: CallbackQuery,
    state: FSMContext,
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è discogs –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥."""
    _, genre = call.data.split("_")

    await call.message.delete_reply_markup()

    year: int = datetime.now().year

    digit: int = discogs_setting.COUNT_ALBUMS_SEARCH

    # –í—Å—Ç–∞–µ–º –≤ discogs_state –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∏ –∫—É–¥–∞ –Ω–µ –º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏
    await state.set_state(DiscogsFSM.counter)
    await state.update_data(counter=0)

    loop = asyncio.get_event_loop()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª—å–±–æ–º–∞—Ö
    update_pogress = make_update_progress(loop=loop, state=state)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª—å–±–æ–º–∞—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞
    cancel_check = make_cancel_check(loop=loop, state=state)

    await bot.send_message(
        chat_id=call.message.chat.id,
        text="–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—Å—è...",
        reply_markup=get_cancel_button(),
    )
    progress_msg: Message = await call.message.answer(
        f"üë©‚Äçüî¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\nüì• " f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–æ–≤: 0%"
    )
    # üß† –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ run_in_executor
    processing_task: Future[List] = loop.run_in_executor(
        None,
        get_list_albums_for_discogs,
        genre,
        digit,
        discogs_setting.URL_SEARCH,
        year,
        cancel_check,
        update_pogress,
    )

    while not processing_task.done():
        data = await state.get_data()

        if data.get("discogs_state", None):
            break
        try:
            result = (data.get("counter", 0) / digit) * 100
            await progress_msg.edit_text(
                f"üë©‚Äçüî¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\nüì• " f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–æ–≤: {result:.1f}%"
            )
        except Exception:
            pass
        await asyncio.sleep(0.5)

    data: Dict = await state.get_data()
    if data.get("discogs_state", None):

        await bot.send_message(
            chat_id=call.message.chat.id,
            text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
        )

        # –ñ–¥–µ–º –ø–æ–∫–∞ –æ—Ç–º–µ–Ω—è—Ç—Å—è –≤—Å–µ —Ç–∞—Å–∫–∏ —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–¥–µ–ª–∞—Ç—å state.clear
        while not processing_task.done():
            await bot.send_chat_action(call.message.chat.id, "typing")
            await asyncio.sleep(0.5)

        await state.clear()
        await bot.send_message(
            chat_id=call.message.chat.id,
            text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞...",
            reply_markup=ReplyKeyboardRemove(),
        )
        await call.message.answer(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ –∞–ª—å–±–æ–º–æ–≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö "
            "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–∞–π—Ç–∞ discogs.com –ø—Ä–µ—Ä–≤–∞–Ω–∞",
            reply_markup=get_main_menu_button(),
        )
        return
    else:
        try:
            data = await processing_task

            album_artist: Dict = data[0].dict()
            img: str = album_artist["IMG"]

            album: str = get_descripions_for_albums(album_artist)

            # –°—Ç–∞–≤–∏–º –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ä–≤–∞ —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await progress_msg.edit_text(
                "üë©‚Äçüî¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\n‚úÖ –ê–ª—å–±–æ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            )
            await asyncio.sleep(1)

            await bot.send_photo(
                chat_id=call.message.chat.id,
                photo=img,
                caption=album,
                reply_markup=get_button_for_forward_or_back(
                    list_albums=album_artist, count=0, step=1
                ),
            )
            await state.set_state(DiscogsFSM.albums_list)
            await state.update_data(albums_list=data)
        except Exception as e:
            # üëá –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await progress_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n`{str(e)}`"
            )


@router.callback_query(DiscogsFSM.albums_list, F.data.startswith("discogs "))
async def leafing_through_albums(call: CallbackQuery, state: FSMContext):
    """–õ–∏—Å—Ç–∞–µ—Ç –∞–ª—å–±–æ–º—ã –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥."""
    _, button, count = call.data.split(" ")

    data: Dict = await state.get_data()
    albums_list: List = data["albums_list"]
    album: Dict = albums_list[int(count)].dict()
    img: str = album["IMG"]
    description_album: str = get_descripions_for_albums(album)

    with open("file.txt", "w", encoding="utf-8") as file:
        file.write(description_album)

    await bot.edit_message_media(
        media=InputMediaPhoto(media=img, caption=description_album),
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        reply_markup=get_button_for_forward_or_back(
            count=int(count),
            list_albums=albums_list,
        ),
    )
